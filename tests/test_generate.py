import pytest
import sqlite3
import os
from generate import generate
from jinja2 import Environment, FileSystemLoader
from utils.utils_validation import validate_config, validate_block_schema, validate_bot_token

@pytest.fixture
def env():
    return Environment(loader=FileSystemLoader(os.path.dirname(os.path.abspath(__file__))))

@pytest.fixture
def sample_config():
    return {
        "bot_name": "TestBot",
        "handlers": [
            {
                "command": "/start",
                "text": "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç!\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: +1234567890\nüìß Email: user@example.com",
                "reply_markup": {
                    "inline_keyboard": [
                        [
                            {"text": "–ü–æ—Å–µ—Ç–∏—Ç—å —Å–∞–π—Ç", "url": "https://example.com"},
                            {"text": "–ö–æ–Ω—Ç–∞–∫—Ç—ã", "callback_data": "contact_info", "response": "Email: user@example.com"}
                        ]
                    ]
                }
            }
        ]
    }

@pytest.fixture(autouse=True)
def clear_db():
    if os.path.exists("bot_users.db"):
        os.remove("bot_users.db")

def test_config_validation(sample_config):
    is_valid, error = validate_config(sample_config)
    assert is_valid, f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞: {error}"
    assert error == ""
    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ö–µ–º—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    # is_valid, error = validate_block_schema(sample_config)
    # assert is_valid, f"–°—Ö–µ–º–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞: {error}"
    # assert error == ""

def test_token_validation():
    valid_token = "123456:ABCDEF"
    invalid_token = "invalid_token"
    is_valid, error = validate_bot_token(valid_token)
    assert is_valid, f"–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {error}"
    is_valid, error = validate_bot_token(invalid_token)
    assert not is_valid, "–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º"

def test_invalid_config_validation():
    invalid_config = {
        "bot_name": "TestBot",
        "handlers": [
            {
                "command": "/start",
                "text": "Test",
                "reply_markup": {
                    "inline_keyboard": [
                        [
                            {"text": "–ö–æ–Ω—Ç–∞–∫—Ç—ã", "callback_data": "contact_info"}
                        ]
                    ]
                }
            }
        ]
    }
    is_valid, error = validate_config(invalid_config)
    assert not is_valid
    assert "–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç response" in error



def test_invalid_generation(env, tmp_path):
    invalid_config = {"handlers": [{"command": "/start", "text": "Test"}]}
    output_file = tmp_path / "generated_bot.py"
    is_valid, error = validate_config(invalid_config)
    assert not is_valid, f"–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error}"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    with pytest.raises(Exception):
        generate(invalid_config, output_file)