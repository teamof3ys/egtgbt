import argparse
import asyncio
import json
import os
import sqlite3
from target_bot_code import generate_and_run_bot, escape_markdown, validate_config, validate_block_schema, init_db

def is_valid_text(text):
    """Validate text to ensure it contains only safe characters."""
    if not text:
        return False
    allowed_chars = set(
        "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ,:;@#$%^&" +
        "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
    )
    invalid_chars = set(text) - allowed_chars
    if invalid_chars:
        print(f"–û—à–∏–±–∫–∞: –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ: {invalid_chars}")
        return False
    return len(text.strip()) > 0

async def create_business_card(bot_name, bot_token, welcome_text, phone, email, website, help_text):
    if not is_valid_text(bot_name) or not is_valid_text(welcome_text) or not is_valid_text(help_text) or \
       (phone and not is_valid_text(phone)) or (email and not is_valid_text(email)) or (website and not is_valid_text(website)):
        print("–û—à–∏–±–∫–∞: –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è (–∫—Ä–æ–º–µ !, _, *, [, ], (, ), ~, `, >, #, +, -, =, |, {, }, ., ?).")
        return
    config = {"bot_name": escape_markdown(bot_name), "handlers": []}
    contact_text = f"*{escape_markdown(welcome_text)}*\n\nüìã *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
    if website:
        contact_text += f"üåê *Website:* {escape_markdown(website)}\n"
    if email:
        contact_text += f"üìß *Email:* {escape_markdown(email)}\n"
    if phone:
        contact_text += f"üìû *Phone:* {escape_markdown(phone)}\n"
    if not any([website, email, phone]):
        contact_text += "‚ÑπÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞.\n"

    handlers = [
        {"command": "/start", "text": contact_text},
        {"command": "/help", "text": escape_markdown(help_text)},
        {"command": "/create_bot", "text": "–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞."},
        {"command": "/list_bots", "text": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –±–æ—Ç–æ–≤."},
        {"command": "/delete_bot", "text": "–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞."},
        {
            "command": "/menu",
            "text": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            "reply_markup": {
                "inline_keyboard": [
                    [
                        {"text": "–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞", "callback_data": "menu_create_bot", "response": "–ù–∞—á–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞!"},
                        {"text": "–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤", "callback_data": "menu_list_bots", "response": "–ü–æ–∫–∞–∑—ã–≤–∞—é –≤–∞—à–∏ –±–æ—Ç—ã."}
                    ],
                    [
                        {"text": "–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞", "callback_data": "menu_delete_bot", "response": "–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."}
                    ]
                ]
            }
        }
    ]
    config["handlers"] = handlers

    is_valid, error = validate_config(config)
    if not is_valid:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {error}")
        return
    is_valid, error = validate_block_schema(config)
    if not is_valid:
        print(f"–û—à–∏–±–∫–∞ –≤ —Å—Ö–µ–º–µ: {error}")
        return

    conn = sqlite3.connect("bot_users.db")
    c = conn.cursor()
    c.execute(
        "INSERT INTO bot_configs (user_id, bot_name, config_json, bot_token) VALUES (?, ?, ?, ?)",
        (1, config['bot_name'], json.dumps(config), bot_token)  # user_id=1 –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
    )
    config_id = c.lastrowid
    conn.commit()
    conn.close()

    await generate_and_run_bot(config, bot_token, config_id)
    print(f"–ë–æ—Ç '{config['bot_name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω! ID: {config_id}")

async def create_faq(bot_name, bot_token, faqs):
    if not is_valid_text(bot_name):
        print("–û—à–∏–±–∫–∞: –∏–º—è –±–æ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è (–∫—Ä–æ–º–µ !, _, *, [, ], (, ), ~, `, >, #, +, -, =, |, {, }, ., ?).")
        return
    config = {"bot_name": escape_markdown(bot_name), "handlers": []}
    faq_text = "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å\\."
    keyboard_buttons = []

    faqs = [
        {"question": escape_markdown(faq["question"]), "answer": escape_markdown(faq["answer"])}
        for faq in faqs
    ]

    for i, faq in enumerate(faqs, 1):
        callback_data = f"faq_{i}"
        keyboard_buttons.append([
            {
                "text": faq["question"],
                "callback_data": callback_data,
                "response": faq["answer"]
            }
        ])

    handlers = [
        {"command": "/start", "text": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç FAQ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /faq –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤."},
        {"command": "/faq", "text": faq_text, "reply_markup": {"inline_keyboard": keyboard_buttons}}
    ]
    config["handlers"] = handlers

    is_valid, error = validate_config(config)
    if not is_valid:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {error}")
        return
    is_valid, error = validate_block_schema(config)
    if not is_valid:
        print(f"–û—à–∏–±–∫–∞ –≤ —Å—Ö–µ–º–µ: {error}")
        return

    conn = sqlite3.connect("bot_users.db")
    c = conn.cursor()
    c.execute(
        "INSERT INTO bot_configs (user_id, bot_name, config_json, bot_token) VALUES (?, ?, ?, ?)",
        (1, config['bot_name'], json.dumps(config), bot_token)  # user_id=1 –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
    )
    config_id = c.lastrowid
    conn.commit()
    conn.close()

    await generate_and_run_bot(config, bot_token, config_id)
    print(f"–ë–æ—Ç '{config['bot_name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω! ID: {config_id}")

async def create_poll(bot_name, bot_token, polls):
    if not is_valid_text(bot_name):
        print("–û—à–∏–±–∫–∞: –∏–º—è –±–æ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è (–∫—Ä–æ–º–µ !, _, *, [, ], (, ), ~, `, >, #, +, -, =, |, {, }, ., ?).")
        return
    config = {"bot_name": escape_markdown(bot_name), "handlers": []}
    poll_text = "–û–ø—Ä–æ—Å—ã:\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –æ–ø—Ä–æ—Å\\."
    keyboard_buttons = []

    polls = [
        {
            "question": escape_markdown(poll['question']),
            "options": [escape_markdown(opt) for opt in poll['options']]
        }
        for poll in polls
    ]

    for i, poll in enumerate(polls, 1):
        callback_data = f"poll_{i}"
        options_text = "\n".join([f"- {opt}" for opt in poll['options']])
        response_text = f"–í–æ–ø—Ä–æ—Å: {poll['question']}\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:\n{options_text}"
        keyboard_buttons.append([
            {
                "text": poll["question"],
                "callback_data": callback_data,
                "response": response_text
            }
        ])

    handlers = [
        {"command": "/start", "text": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ–ø—Ä–æ—Å–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /poll –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø—Ä–æ—Å–æ–≤."},
        {"command": "/poll", "text": poll_text, "reply_markup": {"inline_keyboard": keyboard_buttons}}
    ]
    config["handlers"] = handlers

    is_valid, error = validate_config(config)
    if not is_valid:
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {error}")
        return
    is_valid, error = validate_block_schema(config)
    if not is_valid:
        print(f"–û—à–∏–±–∫–∞ –≤ —Å—Ö–µ–º–µ: {error}")
        return

    conn = sqlite3.connect("bot_users.db")
    c = conn.cursor()
    c.execute(
        "INSERT INTO bot_configs (user_id, bot_name, config_json, bot_token) VALUES (?, ?, ?, ?)",
        (1, config['bot_name'], json.dumps(config), bot_token)  # user_id=1 –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
    )
    config_id = c.lastrowid
    for poll in polls:
        c.execute(
            "INSERT INTO polls (config_id, question, options) VALUES (?, ?, ?)",
            (config_id, poll["question"], json.dumps(poll["options"]))
        )
    conn.commit()
    conn.close()

    await generate_and_run_bot(config, bot_token, config_id)
    print(f"–ë–æ—Ç '{config['bot_name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω! ID: {config_id}")

def main():
    init_db()
    parser = argparse.ArgumentParser(description="CLI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Telegram-–±–æ—Ç–æ–≤")
    subparsers = parser.add_subparsers(dest="command")

    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ "–í–∏–∑–∏—Ç–∫–∞"
    parser_business = subparsers.add_parser("business_card", help="–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞-–≤–∏–∑–∏—Ç–∫—É")
    parser_business.add_argument("--name", required=True, help="–ò–º—è –±–æ—Ç–∞")
    parser_business.add_argument("--token", required=True, help="–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather")
    parser_business.add_argument("--welcome", required=True, help="–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
    parser_business.add_argument("--phone", help="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    parser_business.add_argument("--email", help="Email")
    parser_business.add_argument("--website", help="URL —Å–∞–π—Ç–∞")
    parser_business.add_argument("--help-text", required=True, help="–¢–µ–∫—Å—Ç –¥–ª—è /help")

    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ "FAQ"
    parser_faq = subparsers.add_parser("faq", help="–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞-FAQ")
    parser_faq.add_argument("--name", required=True, help="–ò–º—è –±–æ—Ç–∞")
    parser_faq.add_argument("--token", required=True, help="–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather")
    parser_faq.add_argument("--faqs", nargs="+", help="–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ '–≤–æ–ø—Ä–æ—Å:–æ—Ç–≤–µ—Ç')")

    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ "–û–ø—Ä–æ—Å–Ω–∏–∫"
    parser_poll = subparsers.add_parser("poll", help="–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞-–æ–ø—Ä–æ—Å–Ω–∏–∫")
    parser_poll.add_argument("--name", required=True, help="–ò–º—è –±–æ—Ç–∞")
    parser_poll.add_argument("--token", required=True, help="–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather")
    parser_poll.add_argument("--polls", nargs="+", help="–°–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–≤–æ–ø—Ä–æ—Å:–≤–∞—Ä–∏–∞–Ω—Ç1,–≤–∞—Ä–∏–∞–Ω—Ç2,...'")

    args = parser.parse_args()

    if args.command == "business_card":
        asyncio.run(create_business_card(
            args.name, args.token, args.welcome, args.phone, args.email, args.website, args.help_text
        ))
    elif args.command == "faq":
        faqs = []
        if args.faqs:
            for faq_str in args.faqs:
                if ":" in faq_str:
                    question, answer = faq_str.split(":", 1)
                    if is_valid_text(question) and is_valid_text(answer):
                        faqs.append({"question": question, "answer": answer})
                    else:
                        print("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è (–∫—Ä–æ–º–µ !, _, *, [, ], (, ), ~, `, >, #, +, -, =, |, {, }, ., ?).")
                        return
        if not faqs:
            print("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–≤–æ–ø—Ä–æ—Å:–æ—Ç–≤–µ—Ç'.")
            return
        asyncio.run(create_faq(args.name, args.token, faqs))
    elif args.command == "poll":
        polls = []
        if args.polls:
            for poll_str in args.polls:
                if ":" in poll_str:
                    question, options_str = poll_str.split(":", 1)
                    options = options_str.split(",")
                    if len(options) < 2 or len(options) > 4:
                        print("–û—à–∏–±–∫–∞: –æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.")
                        return
                    if is_valid_text(question) and all(is_valid_text(opt) for opt in options):
                        polls.append({"question": question, "options": options})
                    else:
                        print("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è (–∫—Ä–æ–º–µ !, _, *, [, ], (, ), ~, `, >, #, +, -, =, |, {, }, ., ?).")
                        return
        if not polls:
            print("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–≤–æ–ø—Ä–æ—Å:–≤–∞—Ä–∏–∞–Ω—Ç1,–≤–∞—Ä–∏–∞–Ω—Ç2,...'.")
            return
        asyncio.run(create_poll(args.name, args.token, polls))

if __name__ == "__main__":
    main()